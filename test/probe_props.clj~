(ns probe-props
  (:use probe))

;; a pending property
;(property
;  "hey, someone implement me")
;
;; a simple truth with no generators
;(property
;  "testing the language"
;  (= 2 (+ 1 1)))
;
;; a simple failure with no generators
;(property
;  "testing the language"
;  (= 2 (+ 1 2)))
;
;(println (macroexpand-1 '(property
;  "let's try addition with a generator"
;  [gen-int x]
;  (= (+ x x) (+ x x)))))
;
;(property
;  "let's try addition with a generator"
;  [gen-int x]
;  (= (+ x x) (+ x x)))


(defn g [] 1)

;(println (for-all g [x] (= (* x 2) (+ x x))))
;

(println (macroexpand '(for-all g [x]
                  (do (println "Equal is" = "test-expr is " test-expr " calls as " (test-expr 1 1))
                    (= 1 2))
                  )))

(println (for-all g [x]
                  (do 
                    (println "Equal is" = "test-expr is " test-expr " calls as " (test-expr 1 1))
                    (println (= = test-expr))
                    (println "Equal is" = "test-expr is " test-expr " calls as " (test-expr 1 1))
                  )))
;(property
;
;  "Checking edges"
;  [fat-tail [-1 0 1]]
;  [gen-int x]
;  (= ... ))
